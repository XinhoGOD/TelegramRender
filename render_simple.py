#!/usr/bin/env python3
"""
Versi√≥n simplificada del userbot para Render
"""

import os
import threading
import asyncio
import time
from flask import Flask, jsonify
from telethon import TelegramClient
from telethon.sessions import StringSession
from config import API_ID, API_HASH, PHONE_NUMBER

# Configurar Flask
app = Flask(__name__)

# Variables globales
userbot_running = False
connection_status = "Desconectado"
user_info = None

# Leer sesi√≥n string
SESSION_STRING = os.getenv('SESSION_STRING')

class SimpleUserBot:
    def __init__(self):
        self.client = None
        self.running = True
        
    async def test_connection(self):
        """Prueba la conexi√≥n a Telegram"""
        global connection_status, user_info
        
        try:
            print("üì° Probando conexi√≥n a Telegram...")
            connection_status = "Probando conexi√≥n..."
            
            if not SESSION_STRING:
                print("‚ùå No hay sesi√≥n string")
                connection_status = "Error: No hay sesi√≥n string"
                return False
            
            # Crear cliente con timeout
            self.client = TelegramClient(StringSession(SESSION_STRING), API_ID, API_HASH)
            
            # Conectar con timeout
            print("üîå Conectando...")
            await asyncio.wait_for(self.client.connect(), timeout=15.0)
            
            # Verificar autorizaci√≥n
            print("üîê Verificando autorizaci√≥n...")
            if await self.client.is_user_authorized():
                me = await self.client.get_me()
                print(f"‚úÖ Conectado como: {me.first_name}")
                connection_status = f"Conectado como {me.first_name}"
                user_info = {
                    "name": me.first_name,
                    "phone": me.phone,
                    "id": me.id
                }
                return True
            else:
                print("‚ùå Sesi√≥n no autorizada")
                connection_status = "Error: Sesi√≥n no autorizada"
                return False
                
        except asyncio.TimeoutError:
            print("‚è∞ Timeout de conexi√≥n")
            connection_status = "Error: Timeout"
            return False
        except Exception as e:
            print(f"‚ùå Error: {e}")
            connection_status = f"Error: {str(e)}"
            return False
    
    async def run_basic_userbot(self):
        """Ejecuta un userbot b√°sico"""
        try:
            print("üöÄ Iniciando userbot b√°sico...")
            
            # Importar y crear userbot
            from userbot import TelegramUserBot
            bot = TelegramUserBot()
            
            # Iniciar con timeout
            await asyncio.wait_for(bot.start(), timeout=30.0)
            print("‚úÖ Userbot iniciado")
            
            # Mantener activo
            while self.running:
                await asyncio.sleep(10)
                
        except asyncio.TimeoutError:
            print("‚è∞ Timeout al iniciar userbot")
        except Exception as e:
            print(f"‚ùå Error en userbot: {e}")
    
    async def main_loop(self):
        """Bucle principal simplificado"""
        print("üöÄ Iniciando UserBot Simple...")
        
        while self.running:
            try:
                # Probar conexi√≥n
                if await self.test_connection():
                    print("‚úÖ Conexi√≥n exitosa, iniciando userbot...")
                    await self.run_basic_userbot()
                else:
                    print("‚ùå No se pudo conectar, reintentando en 60s...")
                    await asyncio.sleep(60)
                    
            except Exception as e:
                print(f"‚ùå Error en bucle: {e}")
                await asyncio.sleep(30)
            
            finally:
                if self.client:
                    await self.client.disconnect()

def run_userbot_thread():
    """Ejecuta el userbot en un hilo"""
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        bot = SimpleUserBot()
        loop.run_until_complete(bot.main_loop())
    except Exception as e:
        print(f"‚ùå Error en hilo: {e}")

def start_userbot():
    """Inicia el userbot"""
    global userbot_running
    
    if not userbot_running:
        print("üöÄ Iniciando UserBot...")
        thread = threading.Thread(target=run_userbot_thread, daemon=True)
        thread.start()
        userbot_running = True
        print("‚úÖ UserBot iniciado")

# Rutas de Flask
@app.route('/')
def home():
    return jsonify({
        "status": "online",
        "service": "Telegram UserBot Simple",
        "userbot_running": userbot_running,
        "connection_status": connection_status,
        "user_info": user_info
    })

@app.route('/health')
def health():
    return jsonify({
        "status": "healthy",
        "timestamp": time.time(),
        "userbot_running": userbot_running,
        "connection_status": connection_status
    })

@app.route('/status')
def status():
    return jsonify({
        "userbot_running": userbot_running,
        "connection_status": connection_status,
        "user_info": user_info,
        "session_configured": bool(SESSION_STRING),
        "variables_configured": bool(API_ID and API_HASH and PHONE_NUMBER)
    })

@app.route('/start')
def start_bot():
    start_userbot()
    return jsonify({"message": "UserBot iniciado"})

if __name__ == '__main__':
    print("üîç DIAGN√ìSTICO INICIAL")
    print("=" * 50)
    print(f"API_ID: {'‚úÖ Configurado' if API_ID else '‚ùå Faltante'}")
    print(f"API_HASH: {'‚úÖ Configurado' if API_HASH else '‚ùå Faltante'}")
    print(f"PHONE_NUMBER: {'‚úÖ Configurado' if PHONE_NUMBER else '‚ùå Faltante'}")
    print(f"SESSION_STRING: {'‚úÖ Configurado' if SESSION_STRING else '‚ùå Faltante'}")
    print("=" * 50)
    
    # Iniciar userbot
    start_userbot()
    
    # Iniciar servidor web
    print("üåê Iniciando servidor web...")
    app.run(host='0.0.0.0', port=10000, debug=False) 